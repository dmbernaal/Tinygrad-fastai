import ast
import nbformat
import os
import importlib
import sys

def extract_names(code):
    root = ast.parse(code)
    names = set()
    for node in ast.walk(root):
        if isinstance(node, ast.ClassDef):
            names.add(node.name)
        elif isinstance(node, ast.FunctionDef):
            if not node.name.startswith('_'):
                names.add(node.name)
        elif isinstance(node, ast.Assign):
            for target in node.targets:
                if isinstance(target, ast.Name):
                    names.add(target.id)
        elif isinstance(node, ast.ImportFrom):
            for alias in node.names:
                names.add(alias.name)
    return list(names)

def format_cells(notebook_file, export_token="#export"):
    with open(notebook_file) as f:
        nb = nbformat.read(f, as_version=4)
    exported_cells = [cell for cell in nb['cells'] if export_token in cell.get('source', '')]
    return exported_cells

def cells_2_txt(notebook_file, exported_cells):
    alls = set()
    start_code = "# AUTOGENERATED FROM " + notebook_file + "\n"
    raw_code = ""
    for cell in exported_cells:
        cell_code = cell['source'].replace('#export', '').strip()
        raw_code += cell_code + '\n\n'
        alls.update(extract_names(cell_code))
    code = start_code + raw_code + "__all__ = " + str(list(alls))
    return code

def write_code(output_file, code):
    with open(output_file, 'w') as f:
        f.write(code)

def refresh_module(output_file):
    module_name = os.path.splitext(os.path.basename(output_file))[0]
    if module_name in sys.modules:
        importlib.reload(sys.modules[module_name])

def nb_export(notebook_file, output_file, export_token="#export"):
    refresh_module(output_file)
    exported_cells = format_cells(notebook_file, export_token)
    code = cells_2_txt(notebook_file, exported_cells)
    write_code(output_file, code)
